<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1397912_custom_0.PredictiveIntelligenceUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>PredictiveIntelligenceUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var PredictiveIntelligenceUtils = Class.create();
PredictiveIntelligenceUtils.prototype = {
    initialize: function() {
        this.ML_SOLUTION_UTIL = "MLSolutionUtil";
        this.SOLUTION_NAME = "solution_name";
        this.SUCCESS = "SUCCESS";
        this.ERROR = "ERROR";
    },

    /**
     * Fetch solution name from capability defintion metadata.
     * returns solutionName
     */
    _getSolutionName: function(capabilityId) {
        var input = input || {};
        var encodedQuery = 'capability=' + capabilityId;
        var conditionString = encodedQuery;
        var orderAttribute = null;
        var orderDirection = null;
        var recordsPerPage = null;
        var offset = null;

        var capabilityDefinitions = sn_one_extend.OneExtendUtil.getCapabilityDefinitions({
            conditionString,
            orderAttribute,
            orderDirection,
            recordsPerPage,
            offset
        });

        var solutionName = "";

        if (capabilityDefinitions.length > 0) {
            var metadata = capabilityDefinitions[0].metadata || "{}";
            var metadataJSON = JSON.parse(metadata);
            solutionName = metadataJSON.id;
        }
        return solutionName;
    },

    /**
     * Remove _meta, feature_invocation_id and topnresult from request payload.
     * returns cleanedRequest
     */
    _getPredictionInput: function(request) {
        let {
            _meta,
            feature_invocation_id,
            topnresult,
            ...cleanedRequest
        } = request;
        const replaceSlashesInKeys = function(obj) {
            var newObj = {};
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    newObj[key.replace(/\//g, ".")] = obj[key];
                }
            }
            return newObj;
        };

        return replaceSlashesInKeys(cleanedRequest);
    },

    _getErrorOutput: function(errorMessage) {
        return {
            outputs: {
                status: this.ERROR,
                message: errorMessage || "",
                response: [this._getResponseObject()],
            }
        };
    },

    _getResponseObject: function(predictions) {
        predictions = predictions || {};
        return {
            "predictedValue": predictions.predictedValue || "",
            "predictedSysId": predictions.predictedSysId || "",
            "confidence": predictions.confidence || "",
            "threshold": predictions.threshold || ""
        };
    },

    execute: function(request) {
        var response = {};
        try {
            request = request || {};
            gs.info("PredictiveIntelligenceUtils request: " + JSON.stringify(request));
            var solutionName = this._getSolutionName(request._meta.capability);

            // Prediction expected solutionName to be in array format. Below will convert it to array.
            if (JSUtil.notNil(solutionName)) {
                solutionName = solutionName.split(',');
            }

            // Construct topNResult, used as input while doing predictions.
            var topNResult = request["topnresult"];
            var optionBoolThreshold = false;
            var options = {
                top_n: parseInt(topNResult, 10),
                apply_threshold: optionBoolThreshold === 'true'
            };

            var input = [this._getPredictionInput(request)];
            var result = {};
            var extensions = new GlideScriptedExtensionPoint().getExtensions(this.ML_SOLUTION_UTIL);
            if (extensions.length > 0) {
                var point = extensions[0];
                var predictions = (point.getPredictions(input, solutionName, options) || {})[solutionName] || {};
                var key = Object.keys(predictions).length > 0 ? Object.keys(predictions)[0] : null;
                predictions = global.JSUtil.notNil(key) ? predictions[key] : null;
                if (global.JSUtil.notNil(predictions) && !global.JSUtil.isEmpty(predictions)) {
                    var outputs = {
                        status: this.SUCCESS,
                        message: "",
                        response: predictions,
                    };
                    response.outputs = outputs;
                    gs.info("PredictiveIntelligenceUtils predicted response: " + JSON.stringify(response));
                    return response;
                } else {
                    return this._getErrorOutput("400: Results from Prediction were empty. Please try running prediction from Predictive Intelligence UI.");
                }
            } else {
                throw new Error("PredictiveIntelligence Extension point is not available");
            }
        } catch (error) {
            gs.info(sn_i18n.Message.getMessage("glide-one-api", "Execution of PredictiveIntelligence capability failed with error: {error}", {
                error: JSON.stringify(error.message)
            }));
            return this._getErrorOutput("404: Prediction Failed with error: " + error.message + ". Please try running prediction from Predictive Intelligence UI.");
        }
    },

    type: 'PredictiveIntelligenceUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-07-03 09:32:52</sys_created_on>
        <sys_id>d580b40d832ee6107a209965eeaad3cb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PredictiveIntelligenceUtils</sys_name>
        <sys_package display_value="Custom App Testing" source="x_1397912_custom_0">0900784d832ee6107a209965eeaad3e8</sys_package>
        <sys_policy/>
        <sys_scope display_value="Custom App Testing">0900784d832ee6107a209965eeaad3e8</sys_scope>
        <sys_update_name>sys_script_include_d580b40d832ee6107a209965eeaad3cb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-07-03 09:32:52</sys_updated_on>
    </sys_script_include>
</record_update>
